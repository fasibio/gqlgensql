// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

func (d *CompanyPatch) MergeToType() Company {
	var tmpID int
	if d.ID != nil {
		tmpID = *d.ID
	}
	var tmpName string
	if d.Name != nil {
		tmpName = *d.Name
	}
	var tmpMotherCompanyID *int
	if d.MotherCompanyID != nil {
		tmpMotherCompanyID = d.MotherCompanyID
	}
	var tmpMotherCompany Company
	if d.MotherCompany != nil {
		tmpMotherCompany = d.MotherCompany.MergeToType()
	}
	return Company{
		ID:              tmpID,
		Name:            tmpName,
		MotherCompanyID: tmpMotherCompanyID,
		MotherCompany:   &tmpMotherCompany,
	}
}

func (d *CompanyInput) MergeToType() Company {

	tmpID := d.ID

	tmpName := d.Name

	var tmpMotherCompanyID *int
	if d.MotherCompanyID != nil {
		tmpMotherCompanyID = d.MotherCompanyID
	}
	var tmpMotherCompany Company
	if d.MotherCompany != nil {
		tmpMotherCompany = d.MotherCompany.MergeToType()
	}
	return Company{
		ID:              tmpID,
		Name:            tmpName,
		MotherCompanyID: tmpMotherCompanyID,
		MotherCompany:   &tmpMotherCompany,
	}
}

func (d *TodoPatch) MergeToType() Todo {
	var tmpID int
	if d.ID != nil {
		tmpID = *d.ID
	}
	var tmpTitle string
	if d.Title != nil {
		tmpTitle = *d.Title
	}
	var tmpDescription string
	if d.Description != nil {
		tmpDescription = *d.Description
	}
	var tmpDone bool
	if d.Done != nil {
		tmpDone = *d.Done
	}
	var tmpUsers []*User
	if d.Users != nil {
		tmpUsers = make([]*User, len(d.Users))
		for _, v := range d.Users {
			tmp := v.MergeToType()
			tmpUsers = append(tmpUsers, &tmp)
		}
	}
	return Todo{
		ID:          tmpID,
		Title:       tmpTitle,
		Description: tmpDescription,
		Done:        tmpDone,
		Users:       tmpUsers,
	}
}

func (d *TodoInput) MergeToType() Todo {

	tmpID := d.ID

	tmpTitle := d.Title

	tmpDescription := d.Description

	tmpDone := d.Done
	var tmpUsers []*User
	if d.Users != nil {
		tmpUsers = make([]*User, len(d.Users))
		for _, v := range d.Users {
			tmp := v.MergeToType()
			tmpUsers = append(tmpUsers, &tmp)
		}
	}
	return Todo{
		ID:          tmpID,
		Title:       tmpTitle,
		Description: tmpDescription,
		Done:        tmpDone,
		Users:       tmpUsers,
	}
}

func (d *UserPatch) MergeToType() User {
	var tmpID int
	if d.ID != nil {
		tmpID = *d.ID
	}
	var tmpName string
	if d.Name != nil {
		tmpName = *d.Name
	}
	var tmpCompanyID *int
	if d.CompanyID != nil {
		tmpCompanyID = d.CompanyID
	}
	var tmpCompany Company
	if d.Company != nil {
		tmpCompany = d.Company.MergeToType()
	}
	var tmpTodoList []*Todo
	if d.TodoList != nil {
		tmpTodoList = make([]*Todo, len(d.TodoList))
		for _, v := range d.TodoList {
			tmp := v.MergeToType()
			tmpTodoList = append(tmpTodoList, &tmp)
		}
	}
	return User{
		ID:        tmpID,
		Name:      tmpName,
		CompanyID: tmpCompanyID,
		Company:   &tmpCompany,
		TodoList:  tmpTodoList,
	}
}

func (d *UserInput) MergeToType() User {

	tmpID := d.ID

	tmpName := d.Name

	var tmpCompanyID *int
	if d.CompanyID != nil {
		tmpCompanyID = d.CompanyID
	}
	var tmpCompany Company
	if d.Company != nil {
		tmpCompany = d.Company.MergeToType()
	}
	var tmpTodoList []*Todo
	if d.TodoList != nil {
		tmpTodoList = make([]*Todo, len(d.TodoList))
		for _, v := range d.TodoList {
			tmp := v.MergeToType()
			tmpTodoList = append(tmpTodoList, &tmp)
		}
	}
	return User{
		ID:        tmpID,
		Name:      tmpName,
		CompanyID: tmpCompanyID,
		Company:   &tmpCompany,
		TodoList:  tmpTodoList,
	}
}
