// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddCatInput struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Owner       *UserRef `json:"owner"`
	Partner     *UserRef `json:"partner"`
	Description string   `json:"description"`
}

type AddCatPayload struct {
	Cat []*Cat `json:"Cat"`
}

type Cat struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Owner       *User  `json:"owner"`
	Partner     *User  `json:"partner"`
	Description string `json:"description"`
}

type CatAggregateResult struct {
	Count          *int    `json:"count"`
	NameMin        *string `json:"nameMin"`
	NameMax        *string `json:"nameMax"`
	DescriptionMin *string `json:"descriptionMin"`
	DescriptionMax *string `json:"descriptionMax"`
}

type CatFilter struct {
	ID  []string        `json:"id"`
	Has []*CatHasFilter `json:"has"`
	And []*CatFilter    `json:"and"`
	Or  []*CatFilter    `json:"or"`
	Not []*CatFilter    `json:"not"`
}

type CatOrder struct {
	Asc  *CatOrderable `json:"asc"`
	Desc *CatOrderable `json:"desc"`
	Then *CatOrder     `json:"then"`
}

type CatPatch struct {
	ID          *string  `json:"id"`
	Name        *string  `json:"name"`
	Owner       *UserRef `json:"owner"`
	Partner     *UserRef `json:"partner"`
	Description *string  `json:"description"`
}

type DeleteCatPayload struct {
	Cat    []*Cat  `json:"Cat"`
	NumIds *int    `json:"numIds"`
	Msg    *string `json:"msg"`
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type SQLMutationParams struct {
	Add          *bool    `json:"add"`
	Update       *bool    `json:"update"`
	Delete       *bool    `json:"delete"`
	DirectiveEtx []string `json:"directiveEtx"`
}

type SQLQueryParams struct {
	Get          *bool    `json:"get"`
	Query        *bool    `json:"query"`
	Aggregate    *bool    `json:"aggregate"`
	DirectiveEtx []string `json:"directiveEtx"`
}

type Todo struct {
	ID    string `json:"id"`
	Text  string `json:"text"`
	Done  bool   `json:"done"`
	Owner *User  `json:"owner"`
}

type TodoRef struct {
	ID    *string  `json:"id"`
	Text  *string  `json:"text"`
	Done  *bool    `json:"done"`
	Owner *UserRef `json:"owner"`
}

type UpdateCatInput struct {
	Filter *CatFilter `json:"filter"`
	Set    *CatPatch  `json:"set"`
	Remove *CatPatch  `json:"remove"`
}

type UpdateCatPayload struct {
	Cat    []*Cat `json:"Cat"`
	NumIds *int   `json:"numIds"`
}

type User struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Test  string  `json:"test"`
	Todos []*Todo `json:"todos"`
}

type UserRef struct {
	ID    *string    `json:"id"`
	Name  *string    `json:"name"`
	Test  *string    `json:"test"`
	Todos []*TodoRef `json:"todos"`
}

type CatHasFilter string

const (
	CatHasFilterID          CatHasFilter = "id"
	CatHasFilterName        CatHasFilter = "name"
	CatHasFilterOwner       CatHasFilter = "owner"
	CatHasFilterPartner     CatHasFilter = "partner"
	CatHasFilterDescription CatHasFilter = "description"
)

var AllCatHasFilter = []CatHasFilter{
	CatHasFilterID,
	CatHasFilterName,
	CatHasFilterOwner,
	CatHasFilterPartner,
	CatHasFilterDescription,
}

func (e CatHasFilter) IsValid() bool {
	switch e {
	case CatHasFilterID, CatHasFilterName, CatHasFilterOwner, CatHasFilterPartner, CatHasFilterDescription:
		return true
	}
	return false
}

func (e CatHasFilter) String() string {
	return string(e)
}

func (e *CatHasFilter) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CatHasFilter(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CatHasFilter", str)
	}
	return nil
}

func (e CatHasFilter) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CatOrderable string

const (
	CatOrderableName        CatOrderable = "name"
	CatOrderableDescription CatOrderable = "description"
)

var AllCatOrderable = []CatOrderable{
	CatOrderableName,
	CatOrderableDescription,
}

func (e CatOrderable) IsValid() bool {
	switch e {
	case CatOrderableName, CatOrderableDescription:
		return true
	}
	return false
}

func (e CatOrderable) String() string {
	return string(e)
}

func (e *CatOrderable) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CatOrderable(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CatOrderable", str)
	}
	return nil
}

func (e CatOrderable) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
